### Motif-mark Notebook ###

#########################
#####   02/04/2021  #####
#########################

### Given a <file.fasta> containing a set of genes, identify motifs given a 
    <motif.txt>. Draw a "to-scale" gene map with these locations:
    - Sort genes from largest to smallest.
    - Label introns with a thin, horizontal line. 
    - Label exons with a large, rectangular box.
    - Label RBP motifs with tick marks, marked at the beginning of the motif 
    sequence. 
        - If the motif sequence is repeated consecutively in the sequence, place
        a tick mark at the beginning of each open reading frame. 
    - Color different motif tickmarks with different colors. 
        - Put a legend on the top right of each outputted image.
    - Label each gene with the header information contained in the FASTA file, 
    for example:
        - Gene name / ID 
        - Chromosome number : coordinates 
        - Strand specificity (i.e., forward, reverse complement)


#########################
#####   02/05/2021  #####
#########################

### Cloning my base environment to install pycairo 
pwd
/Users/agray11/bioinformatics/Winter2021/Bi625_AdvGen/
conda env export > ./base.yaml
conda env create --name cairo --file base.yaml
conda activate cairo 
conda install -c conda-forge pycairo

### Ran 'import cairo' in script and checked with example code see proper 
install:
https://github.com/pygobject/pycairo/blob/master/examples/pycairo_examples.ipynb

### Counting the length of sequences in test file Figure_1.fasta:
awk '/^>/ {if (seqlen){print seqlen}; print ;seqlen=0;next; } { seqlen += length($0)}END{print seqlen}' Figure_1.fasta 
>INSR chr19:7150261-7150808 (reverse complement)
548
>MBNL chr3:152446461-152447003 
543
>ATP2A1 chr16:28903467-28904044 
578
>CLASP1 chr2:121444593-121445363 (reverse complement)
771

#########################
#####   02/07/2021  #####
#########################

### Setting up pycairo image illustratings
There are 4 basic steps to creating an image:

1. Create a Pycairo surface to hold your drawing
2. Create a Pycairo context that you use to draw with
3. Draw your shapes using the methods of the context object
4. Save the surface to file

How to create a surface:
surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 300, 200)
